@model dynamic

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<h2>Todo list!</h2>
<div id="root" class="content">
</div>
@section Css
{
      <style>
        /* Custom styles for the list */
        .custom-list {
          border: 1px solid #ccc;
          border-radius: 5px;
          overflow: hidden;
        }
    
        .custom-list li {
          padding: 10px;
          border-bottom: 1px solid #ccc;
          background-color: #f9f9f9;
        }
    
        .custom-list li:nth-child(even) {
          background-color: #e6e6e6;
        }
      </style>
}
@section Scripts
{
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>

    <script type="text/babel">
    // 创建一个 Todo 组件
            const Todo = ({ data }) => {
                // return React.createElement('li', null, text);
                // console.log(data);
                const text = data.title;
                const isComplete = data.isComplete;
                const dueBy = data.dueBy;
                return(
                    <li> 
                        <span className="columns icon-text">
                          <span className={isComplete?('column icon has-text-success'):('column icon has-text-info')}>                         
                            <i className={isComplete?('fas fa-check-square'):('fa-solid fa-gear')}></i>
                          </span>
                          <span className="column">{ text } </span>
                          <span className={isComplete?('column tag is-success'):('column tag is-info')}>{dueBy?(dueBy):('no duy date.')}</span>
                        </span>                        
                    </li>
                );
            };
    
            // 创建一个 TodoList 组件
            const TodoList = ({ todos }) => {
                // return React.createElement(
                //     'ul',
                //     null,
                //     todos.map((todo, index) => React.createElement(Todo, { key: index, text: todo }))
                // );
                //     {todos.map((todo, index) => <Todo key={index} text={todo} />)}
                return(
                    <ol className="menu-list custom-list">
                        {todos.map((todo, index) =>
                            <Todo data={ todo } key={todo.id} />
                        )}
                    </ol>
                );
            };
  
    // 异步获取数据
         const fetchData = async () => {
             try {
                 const url = "http://localhost:5279/todos";//await fetch('https://jsonplaceholder.typicode.com/todos');

                 const response = await fetch(url); 
                 const data = await response.json();
                 // console.log(data);
                 // 渲染 TodoList 组件到指定的元素                 
                 // React.createElement(TodoList, { todos: data.map(todo => todo.title) }),
                 // <TodoList todos={data.map(todo => todo.title)} />
                 ReactDOM.render(
                     <TodoList todos={data} />,
                     document.getElementById('root')
                 );
             } catch (error) {
                 console.error('Error fetching data:', error);
             }
         };
 
         // 调用异步获取数据的函数
         fetchData();           
            
            // // 测试数据
            // const testData = ['Learn React', 'Build a Todo App', 'Master React Hooks'];
            //
            // // 渲染 TodoList 组件到指定的元素
            // ReactDOM.render(
            //     React.createElement(TodoList, { todos: testData }),
            //     document.getElementById('root')
            // );

        // // 创建一个 React 组件
        // const MyComponent = () => {
        //     return React.createElement('div', null, 'Hello, React Native!');
        // };
        //
        // // 渲染组件到指定的元素
        // ReactDOM.render(
        //     React.createElement(MyComponent),
        //     document.getElementById('root')
        // );
    </script>
}